---
import Hr from "./Hr.astro";
import IconX from "@/assets/icons/IconX.svg";
import IconMoon from "@/assets/icons/IconMoon.svg";
import IconSearch from "@/assets/icons/IconSearch.svg";
import IconArchive from "@/assets/icons/IconArchive.svg";
import IconSunHigh from "@/assets/icons/IconSunHigh.svg";
import IconMenuDeep from "@/assets/icons/IconMenuDeep.svg";
import IconDice from "@/assets/icons/IconDice.svg";
import LinkButton from "./LinkButton.astro";
import { SITE } from "@/config";
import falseFacts from "@/data/old-false-facts.json";

const { pathname } = Astro.url;

// Remove trailing slash from current pathname if exists
const currentPath =
  pathname.endsWith("/") && pathname !== "/" ? pathname.slice(0, -1) : pathname;

const isActive = (path: string) => {
  const currentPathArray = currentPath.split("/").filter(p => p.trim());
  const pathArray = path.split("/").filter(p => p.trim());

  return currentPath === path || currentPathArray[0] === pathArray[0];
};

const randomFacts = Array.from(
  { length: 16 },
  () => falseFacts[Math.floor(Math.random() * falseFacts.length)]
);
---

<>
  <header class="w-full">
    <a
      id="skip-to-content"
      href="#main-content"
      class="absolute start-16 -top-full z-50 bg-background px-3 py-2 text-accent backdrop-blur-lg transition-all focus:top-4"
    >
      Skip to content
    </a>
    <div
      id="nav-container"
      class="mx-auto flex max-w-app flex-col items-center justify-between sm:flex-row"
    >
      <div
        id="top-nav-wrap"
        class="relative flex w-full flex-col items-center bg-background py-2"
      >
        <div class="mb-4 text-center">
          <a
            href="/"
            class="flex flex-wrap items-baseline gap-2 py-2 text-3xl leading-10 font-bold whitespace-nowrap uppercase sm:text-4xl sm:leading-none"
          >
            <img src="/logo-50px.png" alt="Daily False Facts logo" />
            {SITE.title}
          </a>
          <p class="text-muted-foreground mt-1 text-sm">
            {
              new Date().toLocaleDateString("en-US", {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
              })
            }
          </p>
        </div>
        <nav
          id="nav-menu"
          class="flex w-full flex-col items-center sm:flex-row sm:justify-center sm:space-x-4"
        >
          <button
            id="menu-btn"
            class="focus-outline self-end p-2 sm:hidden"
            aria-label="Open Menu"
            aria-expanded="false"
            aria-controls="menu-items"
          >
            <IconX id="close-icon" class="hidden" />
            <IconMenuDeep id="menu-icon" />
          </button>
          <ul
            id="menu-items"
            class:list={[
              "mt-4 grid w-44 grid-cols-2 place-content-center gap-2",
              "[&>li>a]:block [&>li>a]:px-4 [&>li>a]:py-3 [&>li>a]:text-center [&>li>a]:font-medium [&>li>a]:hover:text-accent sm:[&>li>a]:px-2 sm:[&>li>a]:py-1",
              "hidden",
              "sm:mt-0 sm:flex sm:w-auto sm:gap-x-5 sm:gap-y-0",
            ]}
          >
            <li class="col-span-2">
              <a
                href="/posts"
                class:list={{ "active-nav": isActive("/posts") }}
              >
                All False Facts
              </a>
            </li>
            <li class="col-span-2">
              <a
                href="/about"
                class:list={{ "active-nav": isActive("/about") }}
              >
                About
              </a>
            </li>
            <!-- <li class="col-span-1 flex items-center justify-center">
              <LinkButton
                href={`/random?currentPath=${encodeURIComponent(currentPath)}`}
                class:list={[
                  "focus-outline flex p-3 sm:p-1",
                  { "[&>svg]:stroke-accent": isActive("/random") },
                ]}
                ariaLabel="random post"
                title="Random Post"
              >
                <IconDice />
                <span class="sr-only">Random Post</span>
              </LinkButton>
            </li> -->
            <li class="col-span-1 flex items-center justify-center">
              <LinkButton
                href="/search"
                class:list={[
                  "focus-outline flex p-3 sm:p-1",
                  { "[&>svg]:stroke-accent": isActive("/search") },
                ]}
                ariaLabel="search"
                title="Search"
              >
                <IconSearch />
                <span class="sr-only">Search</span>
              </LinkButton>
            </li>
            {
              SITE.lightAndDarkMode && (
                <li class="col-span-1 flex items-center justify-center">
                  <button
                    id="theme-btn"
                    class="focus-outline relative size-12 p-4 sm:size-8 hover:[&>svg]:stroke-accent"
                    title="Toggles light & dark"
                    aria-label="auto"
                    aria-live="polite"
                  >
                    <IconMoon class="absolute top-[50%] left-[50%] -translate-[50%] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90" />
                    <IconSunHigh class="absolute top-[50%] left-[50%] -translate-[50%] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0" />
                  </button>
                </li>
              )
            }
          </ul>
        </nav>
      </div>
    </div>
  </header>
  <div
    class="bottom--8 absolute left-0 mx-auto w-full overflow-hidden border-2 bg-background text-sm font-semibold tracking-wide uppercase shadow-sm"
  >
    <div class="absolute top-0 left-0 z-10 bg-red-600 px-3 py-1 text-white">
      LIES
    </div>
    <div class="animate-marquee py-1 pl-24 whitespace-nowrap">
      {
        randomFacts.map((f, i) => (
          <>
            {f}
            {i < randomFacts.length - 1 && <span class="px-4">â€¢</span>}
          </>
        ))
      }
    </div>
  </div>
  <br />
  <br />
</>

<script>
  function toggleNav() {
    const menuBtn = document.querySelector("#menu-btn");
    const menuItems = document.querySelector("#menu-items");
    const menuIcon = document.querySelector("#menu-icon");
    const closeIcon = document.querySelector("#close-icon");

    if (!menuBtn || !menuItems || !menuIcon || !closeIcon) return;

    menuBtn.addEventListener("click", () => {
      const openMenu = menuBtn.getAttribute("aria-expanded") === "true";

      menuBtn.setAttribute("aria-expanded", openMenu ? "false" : "true");
      menuBtn.setAttribute("aria-label", openMenu ? "Open Menu" : "Close Menu");

      menuItems.classList.toggle("hidden");
      menuIcon.classList.toggle("hidden");
      closeIcon.classList.toggle("hidden");
    });
  }

  toggleNav();

  // Runs on view transitions navigation
  document.addEventListener("astro:after-swap", toggleNav);
</script>

<style>
  @keyframes marquee {
    0% {
      transform: translate3d(0%, 0, 0);
    }
    100% {
      transform: translate3d(-50%, 0, 0);
    }
  }
  .animate-marquee {
    display: inline-block;
    animation: marquee 120s linear infinite;
  }
  .animate-marquee:hover {
    animation-play-state: paused;
  }
  @media (prefers-reduced-motion: reduce) {
    .animate-marquee {
      animation-play-state: paused !important;
    }
  }
</style>
